<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!-- last modified on 23.05.2004 -->
<html>
<head>
<title>
DOIT_ST - Tips u. Tricks zur Atari Serie: Milan ISA Bus
</title>
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<meta name="Generator" content="UDO6 PL14 for TOS">
<meta name="Email" content="doit@doitarchive.de">
<link rev=made href="mailto:doit@doitarchive.de" title="E-Mail">
<link rel=home href="doitst1h.htm" title="Homepage">
</head>
<body bgcolor="#FFFFFF" text="#000000" link="#0000FF" alink="#FF0000" vlink="#800080">

<table border=0 cellpadding=0 cellspacing=0 width="100%"><tr><td valign=top>
<a href="00con.htm" target="UDOcon"><img src="udo_hm.gif" alt="Home" border=0 width="24" height="24"></a>
<a href="05.htm" target="UDOcon"><img src="udo_up.gif" alt="Milan Hardware" border=0 width="24" height="24"></a>
<a href="0507.htm" target="UDOcon"><img src="udo_lf.gif" alt="Milan Rom Flash" border=0 width="24" height="24"></a>
<a href="0509.htm" target="UDOcon"><img src="udo_rg.gif" alt="Milan Erweiterungskarten" border=0 width="24" height="24"></a>
</td></tr></table>
<table border=0 cellpadding=0 cellspacing=0 width="100%"><tr>
<td valign=top width="8">&nbsp;</td><td valign=top width="100%">
<h1><a name="Milan_20ISA_20Bus">5.8 Milan ISA Bus</a></h1>
<p align=center><img src="image/sline.gif" border=0 width="640" height="2"></p><br>
<p><tt> Das ISA-Bus Steckkartensystem des Milan </tt>
<br>
<br>
</p>
<p><img src="image/deutsch.gif" border=0 width="35" height="22"></p><br>
<p>Der ISA-Bus ist ein einfach zu handhabendes Bussystem im Bezug auf
die Hardware als auch im Bereich der Programmierung. Im Gegensatz zum
PCI Bus ist es auch f&uuml;r Hobbyelektroniker problemlos
m&ouml;glich, eigene Karten selber zu entwickeln. Dies resultiert
einerseits aus dem einfachen mechanischen Aufbau, andererseits aus der
simplen digitalen Logik. Ebenfalls existiert eine Vielzahl
kosteng&uuml;nstiger Zusatzkarten f&uuml;r den Heim- als auch f&uuml;r
den professionellen Bereich.
<br>
</p>
<p>Der ISA-Bus wurde Anfang der 80er Jahre speziell f&uuml;r die
Intel 8086 Prozessorfamilie entwickelt. Aus diesem Grund hat der
ISA-Bus Eigent&uuml;mlichkeiten die im Einsatz zusammen mit einem
Motorolla Prozessor beachtet werden m&uuml;sssen. Diese werden im
folgenden dargestellt:
<br>
<br>
</p>
<dl>
<dt><b>1) Besonderheiten/Software</b></dt><dd>
<br>&nbsp;
<br>a) Die Adressr&auml;ume des 8088/ISA-Bus
<br>
<br>&nbsp;
<br>Der 8086 Prozessor kennt zwei Adresser&auml;ume einen mit einer
Breite von 20Bit, der sogenannte Adressbus, sowie einen mit 16Bit, der
sogenannte Portadressraum. Diese beiden Bereiche findet man
vollst&auml;ndig, ohne L&uuml;cken, am ISA-Bus wieder, dh. 8086
Adressraum = ISA Adressraum!
<br>
<br>&nbsp;
<br>Der Adressbus dient wie der Name schon sagt, zur Adressierung von
RAM/ROM Bereichen und hat eine Gr&ouml;&szlig;e von 1MByte. Der
Portadressraum ist ein &Uuml;berbleibsel aus der 8Bit Zeit und wird in
der Regel als Speicherbereich f&uuml;r Status- und
Konfigurationsregister verwendet. Er hat eine Gr&ouml;&szlig;e von
64KByte. Da der Milan nur einen einzigen Adressraum kennt (was auch
vern&uuml;nftiger ist) m&uuml;ssen die 8086 Adressen in dessen
Speicherraum abgebildet werden. Die Portadressen beginnen beim Milan
ab der Adresse $C0000000 und enden bei $C000DFFF (es wird nicht der
gesamte Adressbereich abgebildet.) Die 20Bit des Adressbuses liegen
zwischen $40000000 $400FFFFF.
<br>
<br>&nbsp;
<br>Installiert man im Milan ein im PC bereich &uuml;bliche Multi- I/O
Karte die einen Druckerport enth&auml;lt (und meist 2 Serielle Ports)
so leigt in der Regel das Ausgaberegister des Druckerports an der
Portadresse $278. Die folgende Anweisung ist n&ouml;tig um jedes 2.Bit
am Druckerausgang zu setzen:
<br>
<br>&nbsp;
<br>move.b #$AA,($C0000278)
<br>
<br>&nbsp;
<br>W&uuml;rde man eine ISA-Grafikkarte installieren bei der, der
Adressraum an Adresse $A0000 (Intel Notation A000:0000) beginnt so
kann man mit folgender Anweisung den Wert $FF dort hineinschreiben:
<br>
<br>&nbsp;
<br>move.b #$FF,($400A0000)
<br>
<br>&nbsp;
<br>b) Little und Big-endian
<br>
<br>&nbsp;
<br>Es gibt Dinge in der Mikroprozessortechnik die eigentlich klar und
logisch sind ....... was nicht hei&szlig;en soll das die
Systemdesigner bei Intel in der Lage sind es zu kapieren.
<br>
<br>&nbsp;
<br>Mit Little und Big-Endian wird umschrieben in welcher Reihenfolge
ein Prozessor Bytes im Speicher ablegt. Schreibt ein 8088 oder auch
ein Pentium ein Byte ins RAM, ist noch alles in Ordnung. Bei einem
Wort (16Bit) wird das niederwertige Byte an die niedrigere Adresse
geschrieben. Und das h&ouml;herwertige an die h&ouml;here! Klingt
logisch auf den ersten Blick!?!? Nehmen wir mal an der Prozessor legt
den Wert $ABCD in die Adresse $400A0000. Dazu Abbildung 1 :
<br>
<br>&nbsp;
<p align=center><img src="image/little.gif" border=0 width="516" height="150"></p><br>
<br>Wie man sieht ist die Reihenfolge genau umgekehrt wie man es
eigentlich erwartet h&auml;tte. Ein Motorolla (und alle anderen
Modernen Prozessoren) machen es in genau umgekehrter Reihenfolge:
<br>
<br>&nbsp;
<p align=center><img src="image/big.gif" border=0 width="535" height="156"></p><br>
<br>Schon rein optisch wirkt diese Darstellung angenehmer. Das von
Intel verwendete Format heist Little-Endian, Motorolla verwendet
Big-Endian. Die Nachteile des Little-Endian Formates sollen an dieser
Stelle nicht weiter Diskutiert werden. Als Anmerkung sei jedoch
folgendes Beispiel gegeben:
<br>
<br>&nbsp;
<br>Man m&ouml;chte den Inhalt des Bildschirmspeichers von links nach
rechts scrollen. Unser Bildschirm soll die Farbtiefe von einem Bit
haben. Mit einem Intelprozessor mu&szlig; man diesen Vorgang Byteweise
durchf&uuml;hren, auch mit einem Pentium! Mit einem Motorolla geht das
ganze Wort bzw. Langwortweise was bedeutet das bei gleicher Taktrate
ein Intel 4 mal langsamer wie ein Motorlla ist........
<br>
<br>&nbsp;
<br>Macht ein Milan Wortlesezugriffe (16 Bit) auf den Porta- dressraum
so kommen die Bytes in der Little-Endian Reihenfolge an. Um nun die
richtige Reihenfolge in einem Register wieder herzustellen, mu&szlig;
dieses um acht Positionen rotiert werden. Dies macht die folgende
Anweisung:
<br>
<br>&nbsp;
<br>ror.w #8,d0
<br>
<br>&nbsp;
<br>Gleiches gilt bei schreibenden Zugriffen. Bei Zugriffen auf den
20Bit Adressraum mu&szlig; keine Rotation vorgenommen werden, da dies
die verwendeten Milan-PCI Chips&auml;tze erledigen.
<br>
<br>&nbsp;
<br>c) Die Interrupts des ISA-Bussystems
<br>
<br>&nbsp;
<br>Der ISA-Bus kennt folgende Interrupts:
<br>
<br>&nbsp;
<br>
<br>
<br>&nbsp;
<div align=center><table border=1 frame=box>
<caption align=bottom>Tabelle 31: ISA-Interrupts</caption>
<tr>
  <td align=left valign=top>Nummer</td>
  <td align=left valign=top>Bedeutung</td>
</tr>
<tr>
  <td align=left valign=top></td>
  <td align=left valign=top></td>
</tr>
<tr>
  <td align=left valign=top>0</td>
  <td align=left valign=top>Zeitgeber</td>
</tr>
<tr>
  <td align=left valign=top>1</td>
  <td align=left valign=top>Tastatur</td>
</tr>
<tr>
  <td align=left valign=top>2</td>
  <td align=left valign=top>eventuell frei beim Milan</td>
</tr>
<tr>
  <td align=left valign=top>3</td>
  <td align=left valign=top>Serielle Schnittstelle 2</td>
</tr>
<tr>
  <td align=left valign=top>4</td>
  <td align=left valign=top>Serielle Schnittstelle 1</td>
</tr>
<tr>
  <td align=left valign=top>5</td>
  <td align=left valign=top>frei</td>
</tr>
<tr>
  <td align=left valign=top>6</td>
  <td align=left valign=top>Diaketten Laufwerk</td>
</tr>
<tr>
  <td align=left valign=top>7</td>
  <td align=left valign=top>Drucker</td>
</tr>
<tr>
  <td align=left valign=top>8</td>
  <td align=left valign=top>Echtzeituhr</td>
</tr>
<tr>
  <td align=left valign=top>9</td>
  <td align=left valign=top>frei</td>
</tr>
<tr>
  <td align=left valign=top>10</td>
  <td align=left valign=top>frei</td>
</tr>
<tr>
  <td align=left valign=top>11</td>
  <td align=left valign=top>frei</td>
</tr>
<tr>
  <td align=left valign=top>12</td>
  <td align=left valign=top>Maus</td>
</tr>
<tr>
  <td align=left valign=top>13</td>
  <td align=left valign=top>frei</td>
</tr>
<tr>
  <td align=left valign=top>14</td>
  <td align=left valign=top>IDE Primarkanal</td>
</tr>
<tr>
  <td align=left valign=top>15</td>
  <td align=left valign=top>IDE Sekund&auml;rkanal</td>
</tr>
</table></div>

<br>
<br>
<br>&nbsp;
<br>ISA Interrupt Vektoren werden in den Milan Exception Bereich
$140+4*Nummer eingeblendet. Um den Vektor zu setzen sollte die
Biosroutine Setexc() verwendet werden.
<br>
<br>&nbsp;
<dt><b>2) Hardware</b></dt><dd>
<br>&nbsp;
<br>a) Der Busslot
<br>
<br>&nbsp;
<p align=center><img src="image/isabus.gif" border=0 width="250" height="600"></p><br>
<br>Der ISA-Bus hat Insgesamt 62 Anschl&uuml;sse.
<br>
<br>&nbsp;
<br>b) Die Pinbeschreibung
<br>&nbsp;
<br>
<br>
<br>&nbsp;
<div align=center><table border=1 frame=box>
<caption align=bottom>Tabelle 32: ISA-Bus Pinbelegung</caption>
<tr>
  <td align=left valign=top>GND</td>
  <td align=left valign=top>Masse</td>
</tr>
<tr>
  <td align=left valign=top>Reset</td>
  <td align=left valign=top>Resetsignal</td>
</tr>
<tr>
  <td align=left valign=top>IRQ 2-7</td>
  <td align=left valign=top>Interruptleitungen</td>
</tr>
<tr>
  <td align=left valign=top>DRQ 1-3</td>
  <td align=left valign=top>DMA-Requestleitungen</td>
</tr>
<tr>
  <td align=left valign=top>res</td>
  <td align=left valign=top>reserviert</td>
</tr>
<tr>
  <td align=left valign=top>/MEMW</td>
  <td align=left valign=top>speichere in Adressraum</td>
</tr>
<tr>
  <td align=left valign=top>/MEMR</td>
  <td align=left valign=top>lese von Adressraum</td>
</tr>
<tr>
  <td align=left valign=top>/IOW</td>
  <td align=left valign=top>schreibe an Portadresse</td>
</tr>
<tr>
  <td align=left valign=top>/IOR</td>
  <td align=left valign=top>lese von Portadresse</td>
</tr>
<tr>
  <td align=left valign=top>/DACK 0-3</td>
  <td align=left valign=top>DMA Acknowledge</td>
</tr>
<tr>
  <td align=left valign=top>/CLK</td>
  <td align=left valign=top>Takt (8,33MHZ)</td>
</tr>
<tr>
  <td align=left valign=top>TC</td>
  <td align=left valign=top>Ende der DMA &Uuml;bertragung</td>
</tr>
<tr>
  <td align=left valign=top>ALE</td>
  <td align=left valign=top>Adress Signal g&uuml;ltig</td>
</tr>
<tr>
  <td align=left valign=top>OSC</td>
  <td align=left valign=top>Oszillator (14,3MHZ beim XT)</td>
</tr>
<tr>
  <td align=left valign=top>/I/O</td>
  <td align=left valign=top>Zeigt Fehler auf ISA-Bus Karte an</td>
</tr>
<tr>
  <td align=left valign=top>D0-D7</td>
  <td align=left valign=top>Datenbits</td>
</tr>
<tr>
  <td align=left valign=top>I/O*</td>
  <td align=left valign=top>Wartezyklen beim Prozessor anfordern</td>
</tr>
<tr>
  <td align=left valign=top>A0-A19</td>
  <td align=left valign=top>Adressbits</td>
</tr>
</table></div>

</dl>
<p>
<br>Technische Informationen von: saheit00@fht-esslingen.de
<br>Sascha Heinisch
<br>
</p>
<p>
<br>
<br>
</p>
<p align=center><img src="image/sline.gif" border=0 width="640" height="2"></p><br>
<p align=center><img src="image/img.gif" border=0 width="50" height="40"></p><br>

<hr>
<address>Copyright &copy; <a href="http://www.doitarchive.de/">Robert Schaffner</a> (<a href="mailto:doit@doitarchive.de">doit@doitarchive.de</a>)<br>
Letzte Aktualisierung am 23. Mai 2004</address>
</td></tr></table>
<table border=0 cellpadding=0 cellspacing=0 width="100%"><tr><td valign=top>
<a href="00con.htm" target="UDOcon"><img src="udo_hm.gif" alt="Home" border=0 width="24" height="24"></a>
<a href="05.htm" target="UDOcon"><img src="udo_up.gif" alt="Milan Hardware" border=0 width="24" height="24"></a>
<a href="0507.htm" target="UDOcon"><img src="udo_lf.gif" alt="Milan Rom Flash" border=0 width="24" height="24"></a>
<a href="0509.htm" target="UDOcon"><img src="udo_rg.gif" alt="Milan Erweiterungskarten" border=0 width="24" height="24"></a>
</td></tr></table>
</body></html>
