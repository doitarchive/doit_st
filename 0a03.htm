<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!-- last modified on 23.05.2004 -->
<html>
<head>
<title>
DOIT_ST - Tips u. Tricks zur Atari Serie: Mach 16
</title>
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<meta name="Generator" content="UDO6 PL14 for TOS">
<meta name="Email" content="doit@doitarchive.de">
<link rev=made href="mailto:doit@doitarchive.de" title="E-Mail">
<link rel=home href="doitst1h.htm" title="Homepage">
</head>
<body bgcolor="#FFFFFF" text="#000000" link="#0000FF" alink="#FF0000" vlink="#800080">

<table border=0 cellpadding=0 cellspacing=0 width="100%"><tr><td valign=top>
<a href="00con.htm" target="UDOcon"><img src="udo_hm.gif" alt="Home" border=0 width="24" height="24"></a>
<a href="0a.htm" target="UDOcon"><img src="udo_up.gif" alt="Beschleuniger" border=0 width="24" height="24"></a>
<a href="0a02.htm" target="UDOcon"><img src="udo_lf.gif" alt="MightyMic" border=0 width="24" height="24"></a>
<a href="0a04.htm" target="UDOcon"><img src="udo_rg.gif" alt="CyReL CaTTamaran TT030 Accelerator" border=0 width="24" height="24"></a>
</td></tr></table>
<table border=0 cellpadding=0 cellspacing=0 width="100%"><tr>
<td valign=top width="8">&nbsp;</td><td valign=top width="100%">
<h1><a name="Mach_2016">10.3 Mach 16</a></h1>
<p align=center><img src="image/sline.gif" border=0 width="640" height="2"></p><br>
<p><tt> Die Maxon-Coprozessor-Cache-Erweiterung MACH 16 </tt>
<br>
<br>
</p>
<p><img src="image/deutsch.gif" border=0 width="35" height="22"></p><br>
<p>Der ST auf 16 MHz
<br>Die Maxon-Coprozessor-Cache-Erweiterung MACH 16
<br>
</p>
<p>Jeder hat sich wahrscheinlich schon einmal (zweimal, dreimal..)
gew&uuml;nscht, seinem ST mehr Dampf machen zu k&ouml;nnen. Jetzt gibt
es mit der MAXON-Coprozessor-Cache-Erweiterung (MACH16) f&uuml;r jeden
Bastler die M&ouml;glichkeit, sich diesen Wunsch zu erf&uuml;llen
(f&uuml;r handwerklich nicht so Versierte ist nat&uuml;rlich auch ein
Fertigger&auml;t erh&auml;ltlich).
<br>
</p>
<p>
<br>
<br>
</p>
<p align=center><img src="image/bild1d.gif" border=0 width="372" height="246"></p><br>
<div align=center><tt> Der Prototyp der MACH 16 </tt>
<br>
</div>
<p>
<br>
<br>
</p>
<p><b> Das Konzept </b>
<br>
</p>
<p>Der erste Gedanke zur Beschleunigung des ST ist nat&uuml;rlich,
die Taktfrequenz des Prozessors zu erh&ouml;hen. Der MC68000 wird mit
16 MHz statt mit 8MHz getaktet. Damit wird die Rechenleistung aber
noch lange nicht verdoppelt, da der Prozessor sich immer noch mit
langsamen Buszugriffen abqu&auml;len muss. Deshalb sind
zus&auml;tzlich auf der Karte noch 16 kBytes schnelles Cache-RAM
vorhanden, das als Direct-Mapped-Cache (das Fremdwort wird unten
erkl&auml;rt) organisiert ist. Darauf kann der Prozessor mit voller
Geschwindigkeit zugreifen, wodurch der ST bis doppelt so schnell
l&auml;uft. F&uuml;r besonders kritische Programme (Zeitschleifen!)
kann der Cache-Speicher nat&uuml;rlich auch abgeschaltet werden. Wer
es gern noch schneller h&auml;tte, kann zus&auml;tzlich noch den
numerischen Coprozessor M68881 best&uuml;cken. Dieser wird auch mit 16
MHz betrieben und vervielfacht noch einmal die Rechenleistung bei
Fliesskommaoperationen. Die Einbindung des M68881 in den ST ist
kompatibel zu der ATARI-Koprozessorerweiterung, so Der Prototyp der
MACH16 dass alle Programmpakete mit Coprozessorunterst&uuml;tzung
(z.B. Turbo-C) funktionieren. Bevor nun aber genauer auf die Schaltung
eingegangen wird, m&ouml;chte ich an dieser Stelle die von mir
verwendete Beschreibung von Logikpegeln erl&auml;utern. Es werden nur
die Bezeichnungen 'aktiv' und 'inaktiv' bzw. 'nicht aktiv' verwendet.
Dies geschieht, um Verwirrungen bei Active-Low- und
Active-High-Signalen zu vermeiden. Alle verwendeten
Signalbezeichnungen beziehen sich auf den <a href="190d.htm" target="UDOcon">Schaltplan</a>.
Active-Low-Signale werden durch ein vorangestelltes T gekennzeichnet.
Zur Verdeutlichung: ein aktives Active-High-Signal hat den Logikpegel
1, ein aktives Active-Low-Signal den Logikpegel 0.
<br>
</p>
<p>
<br><b> Das Cache-Prinzip </b>
<br>
</p>
<p>Wie oben schon erw&auml;hnt, wird ein mit 16 MHz getakteter
Prozessor durch die langsame Peripherie stark gebremst. Um dem
Prozessor nun aber Daten (nat&uuml;rlich auch Befehle) schnell
zug&auml;nglich zu machen, befinden sich auf der Platine 16 kBytes
schnelles RAM (8 k * 16 Bit), in dem Kopien des Hauptspeichers (RAM
und ROM) gehalten werden. Will nun der Prozessor aus dem Hauptspeicher
lesen, wird zuerst &uuml;berpr&uuml;ft, ob sich schon eine Kopie des
zu lesenden Speichers im Cache befindet. Ist dies der Fall, liegt ein
'Cache Hit' vor, und es wird aus dem schnellen RAM mit einem 16
MHz-Buszyklus (vier Takte, 250 ns) gelesen. Ansonsten ('Cache Miss')
muss auf den Hauptspeicher zugegriffen werden. Dabei werden f&uuml;r
den Prozessor Wartezyklen eingebaut, und ein Buszyklus dauert acht
Takte (500 ns), was einem normalen 8 MHz-Zugriff entspricht. Auch bei
einem Zugriff auf die I/O-Peripherie wird ein 'langsamer' Buszyklus
benutzt. Zus&auml;tzlich wird auf den Hauptspeicher lesend immer in
Wortbreite zugegriffen, wodurch bei aufeinanderfolgenden
Byte-Zugriffen des Prozessors jedes zweite Byte aus dem Cache gelesen
wird. Damit die Daten im Cache-Speicher immer denen im Hauptspeicher
entsprechen, muss man sie nat&uuml;rlich auch bei Schreibzugriffen
aktualisieren. Dabei werden gleichzeitig der Cache- und der
Hauptspeicher mit eimem acht Takte dauerndem Buszyklus beschrieben
(Write Through Cache). Bei dieser Realisierung erfolgt allerdings nur
die Auffrischung der schon im Cache vorhandene Daten. Das hat den
Vorteil, dass das Cache auch schon beim Speichertest w&auml;hrend des
Kaltstarts des ST aktiv sein kann. Zur Erkl&auml;rung: Die
Speichertestroutine bestimmt die Speicherbelegung durch Beschreiben
und anschliessendes Probelesen von einzelnen Adressen. W&uuml;rde nun
durch jeden Schreibzugriff direkt das Cache aktualisiert, erhielte man
immer das Ergebnis, dass der ST mit vier MByte best&uuml;ckt sei. Der
Vergleich der beiden Cache-Algorithmen ergab auch keine Unterschiede
in der Rechenleistung, so dass guten Gewissens der g&uuml;nstigere
gew&auml;hlt werden konnte. Da der vorgesehene Cache-Speicher relativ
klein ist, muss man recht h&auml;ufig (bei einem Cache-Miss)
entscheiden, welche Daten im Cache &uuml;berschrieben werden
k&ouml;nnen. Ideal w&auml;ren nat&uuml;rlich die Daten, die der
Prozessor nicht mehr braucht. Allerdings ist ein solcher
'Kaffeesatzalgorithmus' noch nicht entwickelt worden (wenn doch jemand
einen kennen sollte, bitte den <a href="0201.htm" target="UDOcon">Autor</a> benachrichtigen). Zum Erreichen
von m&ouml;glichst hohen Cache-Hit-Raten sind allerdings verschiedene
Strategien bekannt. Wir verwenden die einfachste (und billigste!)
Methode, das Direct-Mapped-Cache. Jeder Adresse des Hauptspeichers
weist man eine Adresse im Cache zu. Dazu sind ausser den Daten-RAMs
(6264) auch noch sehr schnelle Cache-Tag-RAMs (IDT7174S) vorhanden.
Ihre Adresseing&auml;nge sind genauso wie die der DatenRAMs mit den
unteren dreizehn Adressleitungen des Prozessors (A1-A13) verbunden.
Durch diese unvollst&auml;ndige Adresszuordnung wird ein Speicherwort
der Cache-RAMs vielen Hauptspeicherw&ouml;rtern zugeordnet, die
jeweils 16 kBytes auseinanderliegen. Um nun feststellen zu
k&ouml;nnen, welche Hauptspeicherzelle in den Daten-RAMs gespeichert
ist, sind die restlichen zehn Adressleitungen des Prozessors mit den
Daten-Pins der CacheTag-RAMs verbunden. Ausser den Daten wird also
auch noch der obere Teil der Adresse gespeichert. Wie erkennt die
Cache-Steuerung nun aber, ob die vom Prozessor gew&uuml;nschte Adresse
im Cache liegt? Da kommen die speziellen Eigenschaften der
Cache-Tag-RAMs ins Spiel. Sie haben zus&auml;tzlich zu dem normalen
RAM-Innenleben noch einen Komparator integriert, der die aussen an den
Daten-Pins anstehenden Datenmuster mit den gespeicherten vergleicht
(f&uuml;r Insider: wenn /CS aktiv und /OE, /WE inaktiv). Das Ergebnis
des Vergleichs wird am MATCH-Pin bekanntgemacht. Dieser Ausgang ist
ein Open-Drain-Anschluss, so dass man leicht mehrere Bausteine
parallel anschliessen kann (wie geschehen). Das so erzeugte Signal
meldet der Logik einen auftretenden Cache-Hit (das Signal ist im
<a href="190d.htm" target="UDOcon">Schaltplan</a> mit HIT bezeichnet). Als zweite spezielle Eigenschaft
besitzen die Cache-Tag-RAMs einen L&ouml;scheingang (/CLR), mit dem
der Inhalt schnell (bei den benutzten RAMs in 65ns) gel&ouml;scht
werden kann. Damit kann das gesamte Cache in besonderen
Betriebszust&auml;nden als ung&uuml;ltig markiert werden. Dazu sind
die nicht benutzten Daten-Pins mit VCC (+5V) verbunden. Die dort
anliegenden Datenmuster (nat&uuml;rlich logisch eins) werden auch mit
dem Inhalt der angew&auml;hlten Speicherzelle verglichen, wodurch sich
bei gel&ouml;schtem Cache immer ein Cache-Miss ergibt. Die
erw&auml;hnten besonderen Betriebszust&auml;nde, bei denen das Cache
gel&ouml;scht wird, sind:
<br>
</p>
<p>RESET des Prozessors.
<br>Insbesondere beim Power-On-Reset ist der Cache-Inhalt undefiniert.
<br>
</p>
<p>Busfreigabe des Prozessors. Da der DMA-Chip des ST seine Daten
unter Umgehung des Adressbusses direkt in den RAM-Speicher schreibt,
k&ouml;nnen die Zugriffsadresse nicht ermittelt und wie bei einem
Prozessorzugriff das Cache aktualisiert werden. Die Daten im Cache
k&ouml;nnten also ung&uuml;ltig sein. Die Busfreigabe ist mit /BGACK
erkennbar.
<br>
</p>
<p>Abschaltung des Caches. Das w&auml;re nicht unbedingt n&ouml;tig,
ist aber am einfachsten zu realisieren.
<br>
<br>
<br>
</p>
<p align=center><img src="image/bild1b.gif" border=0 width="530" height="392"></p><br>
<div align=center><tt> Bild 1b: Anschlussplan der FPU </tt>
<br>
</div>
<p>
<br>
<br><b> Die Schaltung </b>
<br>
<br>
</p>
<p>Nachdem der <a href="190d.htm" target="UDOcon">Schaltplan</a> schon angesprochen wurde, kommt hier eine
kleine &uuml;bersicht. Da w&auml;re zun&auml;chst einmal IC 1, die 16
MHz-<a href="080108.htm" target="UDOcon">CPU</a> MC68000. Die meisten Pins der <a href="080108.htm" target="UDOcon">CPU</a> sind mit den entsprechenden
Pins des <a href="080108.htm" target="UDOcon">CPU</a>-Sockels verbunden, der die alte <a href="080108.htm" target="UDOcon">CPU</a> ersetzt (zum Einbau
sp&auml;ter mehr). Nur /AS, /UDS, /LDS und /DTACK sind davon
ausgenommen und werden von der Cache-Steuerung &uuml;bernommen. Ferner
ist der Takteingang CLK mit dem 16 MHzTakt CL 16 verbunden. 1C2 und
1C3 sind die Cache-Tag-RAMs IDT7174S-35. Das -35 bedeutet 35 ns
Zugriffszeit. Der Anschluss der Adressund Datenleitungen wurde schon
erkl&auml;rt. Die ICs sind immer selektiert (/CS ist mit Masse
verbunden), die Ausgangstreiber immer desaktiviert (/OE auf VCC).
F&uuml;r die Cache-Steuerung wird mit den beiden MATCH-Ausg&auml;ngen
und R5 das Signal HIT erzeugt, das ein Cache-Hit anzeigt. /CLR ist der
L&ouml;scheingang, und mit /WE k&ouml;nnen die Cache-Tag-RAMs
beschrieben werden. F&uuml;r die Daten-RAMs 1C4 und 1C5 gen&uuml;gen
die langsameren Speichertypen 6264LPIO mit 'nur' 100 ns Zugriffszeit.
1C4 speichert die unteren acht Daten-Bits DO bis D7, w&auml;hrend 1C5
f&uuml;r D8 bis D15 zust&auml;ndig ist. Auch an diesen Bausteinen ist
das Chip-Select mit dem Anschluss von /CE 1 und CE2 an Masse bzw. VCC
immer aktiv. Die Ansteuerung der Ausgangstreiber f&uuml;r einen
Lesezugriff erfolgt gemeinsain &uuml;ber /DOE. Im Gegensatz dazu
k&ouml;nnen 1C4 und 1C5 mit /LDW und /UDW getrennt beschrieben werden.
Der Anschluss des Fliesskomma-Coprozessors MC68881 (ICIO) an den
MC68000 ist relativ einfach. Da der MC68881 einen 32-Bit breiten
Datenbus besitzt, muss jede Datenleitung des Prozessors zweimal
angeschlossen werden. Dass der MC68000 nur einen 16-Bit Datenbus
besitzt, wird dem Coprozessor mit /SIZE an WC und AO an Masse
mitgeteilt. Die Registerwahl im MC68881 geschieht durch A1 bis A4,
wodurch 16 16-Bit-Register unterschieden werden k&ouml;nnen. Dieser
32-ByteAdressbereich wird durch das Chip-Select /FCS (erzeugt in IC6)
ab der Adresse $FFFA40 (kompatibel zum ATARI-Coprozessor) in den
Adressraum des Prozessors eingeblendet. /RESET, /AS und R/W sind mit
den gleichnamigen Signalen des Prozessors verbunden, /DSACKI mit dem
System-DTACK-Signal /SDT. /DS (Data Strobe) wird mit zwei NANDs in 1C9
aus /UDS und /LDS gewonnen. Der Takteingang ist nat&uuml;rlich an den
16 MHzTakt CL16 angeschlossen.
<br>
</p>
<p>
<br>
<br>
</p>
<p align=center><img src="image/bild1a.gif" border=0 width="866" height="1029"></p><br>
<div align=center><tt> Bild 1a: <a href="190d.htm" target="UDOcon">Schaltplan</a> der MACH 16 (ohne FPU) </tt>
<br>
</div>
<p>
<br>
<br>
</p>
<p><b> Cache-Steuerung </b>
<br>
<br>Kommen wir nun zum Kern der Schaltung, zur Cache-Steuerung. Sie
ist mit den drei GALs IC6 bis IC8, entsprechend GAL1 bis GAL3,
realisiert. Die einfachste Funktion hat IC6 (GAL1) zu erf&uuml;llen.
Es stellt einen simplen Adressdekoder dar. Die Logikgleichungen
daf&uuml;r sind dem GAL-Listing 1 zu entnehmen. Die Ausg&auml;nge sind
mit '.T' als Tri-State-Ausg&auml;nge konfiguriert. Dadurch k&ouml;nnen
einige Ausg&auml;nge abgeschaltet und als (Adress-) Eing&auml;nge
benutzt werden. Das Signal MEM wird aktiv, wenn ein Zugriff auf den
Hauptspeicher (RAM oder ROM) erfolgt. Dazu werden die Adressen $000000
bis $3FFFFF und $FCOOOO bis $FEFFFF dekodiert. /FCS ist das
Chip-Select-Signal f&uuml;r den Coprozessor und wird f&uuml;r die
Adressen $FFFA40 bis $FFFA5F aktiv. In IC8 (GAL3) sind die
DTACK-Steuerung und die Cache-L&ouml;schlogik zusammengefasst (siehe
GAL-Listing 3). Die Cache-L&ouml;schlogik ist schnell beschrieben. Sie
fasst die drei oben beschriebenen Bedingungen zum L&ouml;schen der
CacheTag-RAMs durch eine OR-Verkn&uuml;pfung zusammen.
<br>
</p>
<p>
<br>
<br>
</p>
<p><b> Die GAL-Listings </b>
<br>
</p>
<p>Listing 1
<br>
</p>
<p>Cache-Controller fur ATARI ST
<br>GAL 1: Adressdekodierung
<br>
</p>
<pre>
*IDENTIFICATION
  CCDT1V1C;

*TYPE
  GAL20V8;

*PINS
  A23      = 1,
  A22      = 2,
  A21      = 3,
  A20      = 4,
  A19      = 5,
  A18      = 6,
  A17      = 7,
  A15      = 8,
  A13      = 9,
  A11      = 10,
  A9       = 11,
  A7       = 13,
  A8       = 14,
  A12.T    = 16,
  A14.T    = 17,
  A16.T    = 18,
  A6.T     = 19,
  MEM.T    = 20,                % RAM/ROM-Zugriff %
  A10.T    = 21,
 /FCS.T    = 22,                % Fpu Chip Select %
  A5       = 23;


*BOOLEAN-EQUATIONS

  A6.E = GND ;
  A10.E = GND ;
  A12.E = GND ;
  A14.E = GND ;
  A16.E = GND ;

  MEM = /A23 &amp; /A22
      + A23 &amp; A22 &amp; A21 &amp; A20 &amp; A19 &amp; A18 &amp; /A16
      + A23 &amp; A22 &amp; A21 &amp; A20 &amp; A19 &amp; A18 &amp; /A17;

  FCS =  A23 &amp; A22 &amp; A21 &amp; A20 &amp; A19 &amp; A18 &amp; A16
       &amp; A15 &amp; A14 &amp; A13 &amp; A12 &amp; A11 &amp; /A10 &amp; A9 &amp; /A8 &amp; /A7 &amp; A6 &amp; /A5;

*END

</pre>
<p>Listing 2
<br>
</p>
<p>Cache controller fur ATARI ST
<br>GAL 2: Cache und Bussteuerung
<br>
</p>
<pre>
*identification
CCDT2V6;

*type
GAL16V8;

*pins

/PAS    = 1,            % verzogertes AS-Signal         %
/UDS    = 2,                    % Upper Data Strobe (prozessor) %
/LDS    = 3,                    % Lower Data Strobe (prozessor) %
/WR     = 4,            % Read/Write                    %
/AS     = 5,            % Address strobe (prozessor)    %
 CEN    = 6,                    % Cache ein-aus                                 %
 MEM    = 7,            % RAM/ROM-Zugriff               %
/BGACK  = 8,                    % Bus Grant ACKnowledge                 %
 HIT    = 9,            % Cache-Treffer                 %
 EN_I   = 11,                   % Cache Enable (Ruckkopplung)   %
 ENAB.T = 12;           % Cache Enable (Ausgang)        %
/CWE.T  = 13;                   % Write Enable Cache-RAMs               %
/LDWE.T = 14;                   % Write Enable unteres Daten RAM%
/UDWE.T = 15;                   % Write Enable oberes Daten RAM %
/BLDS.T = 16,                   % Lower Data Strobe (bus)       %
/BUDS.T = 17,                   % Upper Data Strobe (bus)       %
/BAS.T  = 18,                   % Address Strobe (bus)                  %
/DOE.T  = 19,                   % Output Enable Daten-RAMs              %

*boolean-equations

 BAS.E = /BGACK;

 BAS = AS &amp; PAS &amp; /EN_I
         + AS &amp; PAS &amp; /MEM
         + AS &amp; PAS &amp; WR
         + AS &amp; PAS &amp; /HIT
         + AS &amp; BAS;

 BLDS.E = /BGACK;

 BLDS = PAS &amp; LDS &amp; /EN_I
          + PAS &amp; LDS &amp; /MEM
          + PAS &amp; LDS &amp; WR
          + PAS &amp; LDS &amp; MEM &amp; /WR &amp; /HIT
          + PAS &amp; UDS &amp; MEM &amp; /WR &amp; /HIT
          + LDS &amp; BLDS
          + UDS &amp; BLDS;

 BUDS.E = /BGACK;

 BUDS = PAS &amp; UDS &amp; /EN_I
          + PAS &amp; UDS &amp; /MEM
          + PAS &amp; UDS &amp; WR
          + PAS &amp; UDS &amp; MEM &amp; /WR &amp; /HIT
          + PAS &amp; LDS &amp; MEM &amp; /WR &amp; /HIT
          + UDS &amp; BUDS
          + LDS &amp; BUDS;

 CWE = EN_I &amp; BAS &amp; ( UDS + LDS ) &amp; MEM &amp; /WR &amp; /HIT
         + ( UDS + LDS ) &amp; CWE;

 DOE = ( UDS + LDS ) &amp; MEM &amp; /WR &amp; HIT &amp; /CWE &amp; EN_I;

 UDWE = EN_I &amp; PAS &amp; ( UDS + LDS ) &amp; MEM &amp; ( /WR &amp; /HIT + WR &amp; UDS &amp; HIT )
      + ( UDS + LDS ) &amp; UDWE ;

 LDWE = EN_I &amp; PAS &amp; ( UDS + LDS ) &amp; MEM &amp; ( /WR &amp; /HIT + WR &amp; LDS &amp; HIT )
      + ( UDS + LDS ) &amp; LDWE ;

 ENAB = /AS &amp; CEN + AS &amp; EN_I + CEN &amp; EN_I ;


*end

</pre>
<p>Listing 3
<br>
</p>
<p>Cache controller fur ATARI ST
<br>GAL 3: DTACK Steuerung und Cache Loschlogik
<br>(nur zum Entwurf)
<br>
</p>
<pre>
*identification
CCDT3V8;

*type
GAL16V8;

*pins

 CL8    = 2,            % 8 Mhz Takt                    %
/SDT    = 3,            % System DTack                  %
/FCS    = 4,            % Fpu Chip Select               %
/RESET  = 5,            % Reset                         %
/BGACK  = 6,                    % Bus Grant ACKnowledge                 %
 MEM    = 7,            % RAM/ROM-Zugriff               %
/WR     = 8,            % Read/Write                    %
 HIT    = 9,            % Cache-Treffer                 %
 ST0.R  = 12,           % Bit 0 der Zustandskodierung   %
/PDT.T  = 13,           % Prozessor Dtack                               %
 ST1.R  = 14,           % Bit 1 der Zustandskodierung   %
 ST2.R  = 15,           % Bit 2 der Zustandskodierung   %
/PAS.R  = 16,           % verzogertes AS-Signal         %
/CLR.T  = 17,                   % Cache-Loschsignal                             %
/AS.T   = 18,           % Address strobe (Eingang)      %
 ENAB.T = 19;           % Cache Enable (Eingang)        %

*boolean-equations

 ENAB.E = GND ;

 AS.E = GND ;

 CLR = BGACK + RESET + /ENAB ;

 PDT = ST2 &amp; /ST1 &amp; /ST0 &amp; PAS          % Zustand S5 %
         + ST2 &amp; /ST1 &amp;  ST0 &amp; PAS              % Zustand S6 %
         + ST2 &amp;  ST1 &amp;  ST0 &amp; PAS              % Zustand S8 %
         + FCS &amp; AS &amp; SDT;                              % FPU-Zugriff %

         ST0 = AS &amp; /RESET &amp; /FCS &amp; /PAS
                 + AS &amp; /RESET &amp; ST1 &amp; /ST0
                 + AS &amp; /SDT &amp; /RESET &amp; /ST2 &amp; ST1
                 + AS &amp; /CL8 &amp; /RESET &amp; /ST2 &amp; ST1
                 + /RESET &amp; ST2 &amp; /ST0
                 + AS &amp; /WR &amp; /RESET &amp; ST2 &amp; ST1;

     ST1 = AS &amp; MEM &amp; HIT &amp; /WR &amp; ENAB &amp; /RESET &amp; /FCS &amp; /PAS
         + AS &amp; /RESET &amp; /FCS &amp; /ST2 &amp; /ST1 &amp; ST0
         + AS &amp; /RESET &amp; ST1 &amp; /ST0
         + AS &amp; /SDT &amp; /RESET &amp; /ST2 &amp; ST1
         + AS &amp; /CL8 &amp; /RESET &amp; /ST2 &amp; ST1
         + AS &amp; /WR &amp; /RESET &amp; ST2 &amp; ST1;

     ST2 = AS &amp; MEM &amp; HIT &amp; /WR &amp; ENAB &amp; /RESET &amp; /FCS &amp; /PAS
         + AS &amp; SDT &amp; CL8 &amp; /RESET &amp; /ST2 &amp; ST1 &amp; ST0
         + /RESET &amp; ST2 &amp; /ST0
         + AS &amp; /WR &amp; /RESET &amp; ST2 &amp; ST1;

    /PAS = RESET
         + ST2 &amp; /ST1 &amp; ST0
         + WR &amp; ST2 &amp; ST1
         + /AS &amp; ST0
         + /FCS &amp; /ST2 &amp; /ST1 &amp; /ST0 &amp; PAS
         + /AS &amp; /ST2;

*end



Cache controller fur ATARI ST
F&uuml;r GAL 3: Syncrones Schaltwerk f&uuml;r DTACK Steuerung
(nur zum Entwurf)

*identification
CCDT3V8;

*type
GAL20V8;

*declaration
z-var = 4;
x-var = 9;

*pins

/AS     = 2,            % Address strobe                %
 CL8    = 3,            % 8 Mhz Takt                    %
 MEM    = 4,            % RAM/ROM-Zugriff               %
/SDT    = 5,            % System DTack                  %
 HIT    = 6,            % Cache-Treffer                 %
/WR     = 7,            % Read/Write                    %
 ENAB   = 8,            % Cache Enable                  %
/RESET  = 9,            % Reset                         %
/FCS    = 10,           % Fpu Chip Select               %
 ST0.R  = 15,           % Bit 0 der Zustandskodierung   %
 ST1.R  = 16,           % Bit 1 der Zustandskodierung   %
 ST2.R  = 17,           % Bit 2 der Zustandskodierung   %
/PAS.R  = 18;           % verzogertes AS-Signal         %

*x-names
 AS = 1, SDT = 2, CL8 = 3,
 MEM = 4, HIT = 5, WR = 6, ENAB = 7,
 RESET = 8, FCS = 9;

*z-names
 ST2 = 1, ST1 = 2, ST0 = 3, PAS = 4;

*z-values;

 s1 = 000 0;
 s2 = 001 1;
 s3 = 010 1;
 s4 = 011 1;
 s5 = 100 1;
 s6 = 101 1;

 s8 = 101 1;

 s9 = 000 1;

*flow-table

 s[1..9], --- ---- 1 -, f1;         % RESET -&gt; Anfangszustand %
 s[1..4], 0-- ---- 0 -, f1;         % nicht AS in S1-S4 -&gt; Anfangszustand %

 s1, 1-- 0--- 0 0, f2;
 s1, 1-- -0-- 0 0, f2;
 s1, 1-- --0- 0 0, f2;
 s1, 1-- ---0 0 0, f2;
 s1, 1-- 1101 0 0, f8;              % cache hit -&gt; Zustand S8 %
 s1, 1-- ---- 0 1, f9;              % FPU zugriff -&gt; zustand S9 %

 s2, 1-- ---- 0 0, f3;
 s2, 1-- ---- 0 1, f9;              % FPU zugriff -&gt; zustand S9 (zur Sicherheit) %

 s3, 1-- ---- 0 -, f4;

 s4, 10- ---- 0 -, f4;
 s4, 110 ---- 0 -, f4;
 s4, 111 ---- 0 -, f5;              % nur wenn DTACK und CL8 -&gt; S5 %

 s5, --- ---- 0 -, f6;              % In S5 und S6 wird dtack (PDT) fur den %
                                    % Prozessor erzeugt %

 s6, --- ---- 0 -, f1;

 s8, 1-- --0- 0 -, f8;              % Cache hit -&gt; solange AS anliegt und kein %
 s8, 0-- ---- 0 -, f1;              % WR erzeugt wird (read-modify-write zyklus) %
 s8, --- --1- 0 -, f1;              % ist PDT aktiv. %

 s9, 1-- ---- 0 1, f9;              % FPU Zugriff %
 s9, 0-- ---- 0 -, f1;
 s9, --- ---- 0 0, f1;


</pre>
<p>
<br>
<br>
</p>
<p><b> Die DTACK-Steuerung </b>
<br>
<br>Die DTACK-Steuerung im GAL3 ist als synchrones Schaltwerk
(Mealy-Automat) entworfen. Das bedeutet, dass der Baustein mit einem
Taktsignal, hier dem im Vergleich zum Prozessor invertierten
16MHz-Takt, betrieben wird. Die Ausg&auml;nge des Schaltwerkes
wechseln nur mit der steigenden Flanke des Taksignals ihren logischen
Zustand. Dazu werden die Ausgangszellen des GALs mit '.R' als
Registerausg&auml;nge definiert. Aus den Logikgleichungen im Listing
zu GAL3 l&auml;sst sich die Funktion des Schaltwerks jedoch kaum
erkl&auml;ren. Die Gleichungen sind allerdings auch das Ergebnis eines
GAL-Assemblers, der direkt den Entwurf von synchronen Schaltwerken
zul&auml;sst. F&uuml;r den Entwurf werden bestimmte Bit-Muster der
Ausg&auml;nge sogenannten Zust&auml;nden zugeordnet. Das Verhalten des
Schaltwerkes wird dann nur noch durch den Wechsel von einem Zustand
zum n&auml;chsten bestimmt. Welcher Zustandswechsel zur
Durchf&uuml;hrung kommen, h&auml;ngt nur von den Eingangssignalen ab
und wird in einer &uuml;bergangstabelle beschrieben. Das GAL-Listing 4
zeigt die Entwurfsdatei des Schaltwerkes f&uuml;r den benutzten
GAL-Assembler. Obwohl das Schaltwerk in einem GAL16V8 realisiert
wurde, musste ich in diesem Listing als Typ ein GAL20V8 angeben, da
der GAL-Assembler f&uuml;r ein GAL16V8 beim Entwurf von synchronen
Automaten nur acht Eingangsvariablen zul&auml;sst, aber hier neun
benutzt wurden. Weil aber nur die aus dem Entwurf resultierenden
Logikgleichungen in das GAL-Listing 3 kopiert werden mussten,
st&ouml;rt dies nicht. Nach dem Schl&uuml;sselwort 'declaration'
werden die Anzahl der Eing&auml;nge (x-var) und die Anzahl der
synchronen Ausg&auml;nge (z-var) definiert. Danach folgt mit 'pins'
die Namensgebung f&uuml;r die Ein- und Ausg&auml;nge. Die Pin-Nummern
sind nur aus syntaktischen Gr&uuml;nden angegeben und haben hier keine
Bedeutung. Unter 'x-names' legt man die Reihenfolge fest, in der die
Eing&auml;nge sp&auml;ter in der &uuml;bergangstabelle aufgef&uuml;hrt
werden:
<br>
</p>
<p>
<br>
<br>
</p>
<div align=center><table border=1 frame=box>
<tr>
  <td align=left valign=top>1.AS</td>
  <td align=left valign=top>Adresse Strobe des Prozessors</td>
</tr>
<tr>
  <td align=left valign=top>2.MM</td>
  <td align=left valign=top>DTACK-Signal der ST-Periherie</td>
</tr>
<tr>
  <td align=left valign=top>3.CL8</td>
  <td align=left valign=top>8Mhz Takt</td>
</tr>
<tr>
  <td align=left valign=top>4.MEM</td>
  <td align=left valign=top>Speicherdekodierung von GAL 1</td>
</tr>
<tr>
  <td align=left valign=top>5.HIT</td>
  <td align=left valign=top>Cache Hit-Signal der Cache TAG-Rams</td>
</tr>
<tr>
  <td align=left valign=top>6.WR</td>
  <td align=left valign=top>Read/Write des Prozessors</td>
</tr>
<tr>
  <td align=left valign=top>7.ENAB</td>
  <td align=left valign=top>Cache eingeschaltet</td>
</tr>
<tr>
  <td align=left valign=top>8.RESET</td>
  <td align=left valign=top>Na, was wohl?</td>
</tr>
<tr>
  <td align=left valign=top>9.FCS</td>
  <td align=left valign=top>Chipselekt Signal des CoProzessors</td>
</tr>
</table></div>

<p>
<br>
<br>
</p>
<p>Hier werden alle Signale zum besseren Verst&auml;ndnis als
Active-High angenommen. Der wirkliche Signalpegel ist mit der
Namensgebung unter 'pins' definiert. Dann bestimmt man mit 'z-names'
die Reihenfolge der Ausg&auml;nge f&uuml;r die Zustandskodierung. STO
bis ST2 sind reine Zustandsausg&auml;nge, die nur intern
r&uuml;ckgekoppelt werden. PAS hingegen kann man als ein
verz&ouml;gertes AS-Signal betrachten. Es findet Verwendung, um die
Zugriffszeiten der Cache-Tag-RAMs auszugleichen. Mit Aktivierung von
PAS wird in GAL2 die Entscheidung getroffen, ob ein Cache-Hit vorliegt
oder nicht. Die Zustandskodierungen legen Sie unter 'z-values' fest.
Die Zust&auml;nde sind mit s1 bis s9 bezeichnet und willk&uuml;rlich
festgelegt, wobei s7 nicht existiert. Nur die Zuordnung von PAS steht
aus dem genannten Grund fest. Jetzt kommen wir endlich mit 'flowtable'
zum eigentlichen Knackpunkt des Schaltwerks, der
&uuml;bergangstabelle. Ein Tabelleneintrag beginnt darin mit einem
oder mehreren Ausgangszust&auml;nden, dann folgt die notwendige
Kombination der Eing&auml;nge, um in den rechts stehenden Folgezustand
zu gelangen. Eine 'O' bedeutet dabei, dass der Eingang f&uuml;r den
Zustandswechsel logisch inaktiv sein muss. Eine 'F' steht
dementsprechend f&uuml;r logisch aktiv und ein '-' daf&amp;uuml;r,
dass der Eingang f&uuml;r diesen &uuml;bergang irrelevant ist. Die
erste Zeile beschreibt die Initialisierung des Schaltwerkes beim
Reset. Nach einem Reset ist immer der Anfangszustand s1 erreicht.
Ebenso erfolgt ein Wechsel nach s1, wenn in den Zust&auml;nden s1 bis
s4 das AS-Signal inaktiv wird (n&auml;chste Zeile). Dies kann z. B.
bei einem BUS-Error oder einem synchronen Buszyklus passieren. Die
folgenden sechs Zeilen beschreiben den Zustand s1. Betrachten wir
zuerst einmal die Spezialf&auml;lle. Wenn ein Coprozessorzugriff
stattfindet, erkennbar durch die aktivierten Signale AS und FCS,
findet ein Wechsel zum Zustand s9 statt. Bei einem Cache-Hit, d. h.
MEM, HIT, ENAB aktiv und WR inaktiv, wird Zustand s8 angesprungen. In
allen anderen F&auml;llen, in denen AS aktiv ist, wird zum Zustand s2
verzweigt, womit ein 'langsamer' Buszyklus eingeleitet wird (wenn AS
inaktiv ist, bleibt das Schaltwerk in s1, siehe Zeile 2). &Auml;hnlich
kann man die gesamte Zustandstabelle interpretieren. Ich
beschr&auml;nke mich jetzt aber auf ein paar Bemerkungen zu den
Zust&auml;nden:
<br>
</p>
<p>Die Zust&auml;nde s2 und s3 sind reine
Verz&ouml;gerungszust&auml;nde.
<br>
</p>
<p>Im Zustand s4 wird auf das Dtack-Signal /SDT gewartet. Zur genauen
Nachbildung des 8 MHz-Buszyklusses erfolgt die Verzweigung nach
Zustand s5 allerdings erst, wenn der 8 MHz-Takt in seiner High-Phase
ist.
<br>
</p>
<p>W&auml;hrend der Zust&auml;nde s5 und s6 wird das DTACK-Signal
f&uuml;r den Prozessor erzeugt, um den Buszyklus abzuschliessen.
<br>
</p>
<p>Die Verzweigung nach Zustand s8 findet statt, wenn ein Cache-Hit
vorliegt. Dieser Zustand wird verlassen, wenn AS inaktiv oder WR in
einem Read-Modify-Write-Zyklus aktiviert wird. Der
Read-Modify-Write-Zyklus ist ein spezieller MC68000-Buszyklus, der nur
bei dem Assernbler-Befehl TAS zur Anwendung kommt.
<br>
</p>
<p>Zustand s9 wurde eingef&uuml;hrt, damit auf den Coprozessor mit
voller Geschwindigkeit zugegriffen werden kann. Ein Coprozessorzugriff
dauert so nur 4 Takte (= 250 ns) statt der normalen 8 Takte f&uuml;r
die sonstige Peripherie.
<br>
</p>
<p>Zur&uuml;ck zu GAL3
<br>
<br>Mit dem GAL-Listing 4 f&uuml;tterte ich, wie erw&auml;hnt, den
GAL-Assembler, der nach einiger Zeit (ca. 1.5 s) die Logikgleichungen
f&uuml;r ST0, ST1, ST2 und PAS ausspuckte. Die Gleichungen sind
unver&auml;ndert ins GAL-Listing 3 &uuml;bernommen worden.
Darnitbleibt im GAL-Listing 3 nur noch der Ausgang /PDT zu behandeln.
Er ist mit dem /DTACK-Eingang des Prozessors verbunden. Das Signal
wird in den Zust&auml;nden s5, s6 und s8 aktiv. Ausserdem wird das
DTACK-Signal des Coprozessors asynchron an den Prozessor
weitergereicht, damit der Coprozessorzugriff mit maximaler
Geschwindigkeit abl&auml;uft.
<br>
<br>Das letzte IC
<br>
</p>
<p>In IC7 (GAL2) ist die Cache- und Bussteuerung untergebracht. Hier
trifft man die Entscheidung, ob und wie das Cache oder der Systembus
angesprochen werden. Doch bevor ich die Gleichungen des GAL-Listings 2
im einzelnen erkl&auml;re, erst ein &uuml;berblick &uuml;ber den
gew&auml;hlten Cache-Algorithmus:
<br>
</p>
<p>Lesezugriffe auf den Hauptspeicher werden m&ouml;glichst aus dem
Cache befriedigt (logo!).
<br>
</p>
<p>Wenn ein Lesezugriff auf den Hauptspeicher nicht aus dem Cache zu
erf&uuml;llen ist, wird das Cache mit den Daten (und Adressen)
&uuml;berschrieben. Dabei werden Byte-Zugriffe in Wortzugriffe
gewandelt, da das Cache eine Datenbreite von 16 Bits besitzt.
<br>
</p>
<p>Bei Schreibzugriffen erfolgt eine Aktualisierung des Caches nur,
wenn die angesprochene Adresse schon darin gespeichert ist. Auf jeden
Fall wird der Hauptspeicher beschrieben. Hierbei unterscheidet man
nat&uuml;rlich Byte- und Wortzugriffe.
<br>
</p>
<p>Zugriffe auf andere Adressen als die des Hauptspeichers
ber&uuml;hren das Cache nicht. Der ROM-Port-Adressraum wurde
absichtlich aus der Speicherdekodierung ausgeklammert, da er
haupts&auml;chlich f&uuml;r andere Peripherie zur Anwendung kommt.
<br>
</p>
<p>Das Cache wird beim Reset, bei einem DMA-Zugriff, und wenn es
abgeschaltet ist, gel&ouml;scht.
<br>
</p>
<p>Nun zu den Gleichungen.
<br>
<br>Da ist als erstes die Aufteilung des Cache-Enable-Signals in einen
Ein- und einen Ausgang zu erkl&auml;ren. Normalerweise lassen sich die
Ausg&auml;nge eines GALs direkt als Eing&auml;nge verwenden
(R&uuml;ckkopplung). Nur bei der verwendeten Konfiguration (alle
Ausg&auml;nge sind im Tri-State-Modus) beschr&auml;nkt sich die
Funktion der Pins 12 und 19 auf reine Ausg&auml;nge. Daf&uuml;r kann
man die Pins 1 und 11 als Eing&auml;nge benutzen. Da alle anderen
Ausg&auml;nge schon belegt waren und die R&uuml;ckkopplung gebraucht
wird, musste ich die L&ouml;sung mit getrenntem Einund Ausgang
w&auml;hlen. Die Gleichung f&uuml;r das ENAB-Signal stellt ein D-Latch
dar. At dem Eingang CEN k&ouml;nnen Sie das Cache abschalten. Das kann
z.B. mit einem Schalter geschehen. Durch das D-Latch verhindern Sie,
dass sich der Zustand von ENAB w&auml;hrend eines Buszyklusses
(w&auml;hrend AS aktiv ist) &auml;ndert. BAS ist das
Bus-Address-Strobe. Der Ausgang wird durch &quot;BAS.E = /BGACK&quot;
ebenso wie BUDS und BLDS w&auml;hrend eines DMA-Zugriffs in den
Tri-State-Modus versetzt. Um BAS zu aktivieren, m&uuml;ssen.erstens AS
und PAS aktiv sein (zur Erinnerung: PAS ist ein verz&ouml;gertes AS,
das ben&ouml;tigt wird, damit die Cache-Tag-RAMs gen&uuml;gend Zeit
haben, das HIT-Signal zu erzeugen). Ferner m&uuml;ssen das Cache
abgeschaltet sein (/EN-I), kein Zugriff auf den Hauptspeicher erfolgen
(/MEM), das Schreibsignal aktiviert sein oder ein Cache-Mss vorliegen
(/HIT), damit BAS erzeugt wird. Mit &quot;+ AS &amp; BAS&quot;
erreicht man, dass ein einmal erzeugtes BAS bis zum Ende des
Buszyklusses aktiv bleibt (Selbsthaltung). F&uuml;r BUDS und BLDS
gelten im Prinzip &auml;hnliche Bedingungen zur Aktivierung wie bei
AS, nur kommt hier noch die Umwandlung vorn Byte- zu Wortzugriffen
hinzu. Dazu musste auch die Selbsthaltung auf das jeweils andere
Signal augedehnt werden. BUDS und BLDS sind vollkommen symmetrisch.
Mit CWE werden die Cache-Tag-RAMs beschrieben. Das Signal wird aktiv,
wenn nach einem Cache-Miss ein Lesezugriff auf den Hauptspeicher
erfolgt (das Cache muss nat&uuml;rlich eingschaltet sein). DOE
aktiviert die Ausgangstreiber der Daten-RAMs, wenn ein Cache-Hit
vorliegt. Die Verkn&uuml;pfung mit /CWE ist n&ouml;tig, weil bei einem
Schreibzugriff auf die Cache-Tag-RAMs das Signal HIT aktiv wird. LDWE
und UDWE steuern das Schreiben in die Daten-RAMs. LDWE und UDWE werden
aktiviert, wenn ein Cache-Miss vorliegt oder eine im Cache vorhandene
Adresse beschrieben wird. Im zweiten Fall sind nat&uuml;rlich
Byte-Zugriffe durch Einbeziehung von UDS bzw. LDS zu beachten. Damit
ist die Beschreibung der Schaltung abgeschlossen. F&uuml;r manche
Leser wird das Eingehen auf Schaltungsdetails wahrscheinlich recht
starker Tobak gewesen sein, aber ich wollte interessierten
Selbstbauern den Aufbau der Schaltung m&ouml;glichst genau
erl&auml;utern. F&uuml;r den Betrieb einer Fertigkarte ist dieses
Wissen nat&uuml;rlich nicht erforderlich.
<br>
<br>
<br><b> Der Einbau </b>
<br>
<br>Egal ob man die MACH 16 selbst gebaut oder ein Fertigger&auml;t
erstanden hat, um einigen handwerklichen Aufwand kommt man nicht
herum. Der alte Prozessor im ST muss entfernt werden. Jeder Versuch,
ihn unbeschadet auszul&ouml;ten, scheint mir zurn Scheitern
verurteilt. Am besten werden alle Pins mit einem feinen
Seitenschneider abgetrennt und die Reste einzeln ausgel&ouml;tet. Dann
k&ouml;nnen eine 64polige IC-Fassung eingel&ouml;tet und die Karte
aufgesteckt werden. Den 16-MHz-Takt greift man am g&uuml;nstigsten am
Pin 39 des Shifters ab (Pin 5 der <a href="080105.htm" target="UDOcon">MMU</a> ist auch m&ouml;glich). An den
CEN-Jumper kann ein Schalter zur Cache-Abschaltung angeschlossen
werden. Das Cache ist bei &uuml;berbr&uuml;ckten Jumper inaktiv.
<br>
<br>
<br>Probleme mit Software
<br>
<br>Vor dieser M&ouml;glichkeit muss man allerdings nur bei einer
verschwindend kleinen Anzahl von Programmen Gebrauch machen.
Entstehende Probleme sind im allgemeinen auf Zeitschleifen
zur&uuml;ckzuf&uuml;hren. Besonders Programme, die den
Floppy-Controller selbst programmieren, heben sich hierbei
unr&uuml;hmlich hervor, und das sind auch bekannte Disk-Utilities und
Diskettenkopierprogramme. Deshalb hier ein Aufruf an alle
Programmierer, f&uuml;r Zeitmessung nur die im ST vorhandenen Timer zu
verwenden. Wie krass das Problem werden kann, m&ouml;chte ich an der
einfachsten denkbaren Zeitschleife erl&auml;utern:
<br>
</p>
<p>label: dbra d0,label
<br>Diese Schleife z&auml;hlt d0.w runter, bis -1 erreicht ist. Laut
Motorola-Spezifikation dauert ein Schleifendurchlauf 10 Takte. Da im
ST sich aber Prozessor und Videologik den Bus teilen, erh&ouml;ht sich
die Taktzahl auf 12. Bei einem 8-MHz-Takt sind das 1500 ns. Mit
aktiviertem Cache ist der Befehl nach dem ersten Zugriff im Cache
gespeichert, und die 16-MHz-<a href="080108.htm" target="UDOcon">CPU</a> kann mit voller Geschwindigkeit darauf
zugreifen und wenn der Speicher nicht bremst, dauert ein
Schleifendurchlauf nur noch 10*62.5 ns = 625 ns. Dies entspricht einer
Beschleunigung um den Faktor 2.4. Die Zeitschleife wird also schon
nach 41.6% der eigentlich vorgesehenen Zeit beendet, was zu den
beschriebenen Problemen f&uuml;hrt.
<br>
</p>
<p>
<br>
<br>
</p>
<p align=center><img src="image/bild1c.gif" border=0 width="402" height="1233"></p><br>
<div align=center><tt> Bild 1c: HL-Benchmarks </tt>
<br>
</div>
<p>
<br>
<br><b> Die St&uuml;ckliste </b>
<br>
<br>
</p>
<p>Halbleiter:
<br>
</p>
<p>IC1:
<br>MC68000-16 <a href="080108.htm" target="UDOcon">CPU</a> 16MHz
<br>
</p>
<p>IC2,IC3:
<br>IDT7174S-35 CACHE RAM 8K x 8bit 35ns
<br>
</p>
<p>IC4,IC5:
<br>6264-LP10 CMOS-RAM 8K x 8bit 100ns
<br>
</p>
<p>IC6:
<br>GAL20V8-25
<br>
</p>
<p>IC7,IC8:
<br>GAL16V8-25
<br>
</p>
<p>IC9:
<br>74AS00 4-NAND
<br>
</p>
<p>IC10:
<br>MC68881-16 FPU 16Mhz
<br>
</p>
<p>Widerstande:
<br>
</p>
<p>R1-R4:
<br>4.7 KOhm
<br>
</p>
<p>R5:
<br>200 Ohm
<br>
</p>
<p>Kondensatoren:
<br>
</p>
<p>C1-C9:
<br>100nF Keramik
<br>
</p>
<p>Sonstiges:
<br>
</p>
<p>eventuell IC Sockel
<br>2*32 pol Stiftreihen
<br>
</p>
<p>
<br>
<br>
</p>
<p>Michael Gl&auml;ssner - ST Computer - Sonderheft ST Extra 3
<br>F1999L
<br>
<br>
<br>
</p>
<p align=center><img src="image/mach16.gif" border=0 width="521" height="406"></p><br>
<div align=center><tt> Abbildung 1d - <a href="0a0b.htm" target="UDOcon">Hypercache</a> <a href="0a.htm" target="UDOcon">Beschleuniger</a> </tt>
<br>
</div>
<p>
<br>
<br>
</p>
<p>Bild von Bernd Maedike
<br>
<br>
<br>
</p>
<p align=center><img src="image/sline.gif" border=0 width="640" height="2"></p><br>
<p align=center><img src="image/img.gif" border=0 width="50" height="40"></p><br>

<hr>
<address>Copyright &copy; <a href="http://www.doitarchive.de/">Robert Schaffner</a> (<a href="mailto:doit@doitarchive.de">doit@doitarchive.de</a>)<br>
Letzte Aktualisierung am 23. Mai 2004</address>
</td></tr></table>
<table border=0 cellpadding=0 cellspacing=0 width="100%"><tr><td valign=top>
<a href="00con.htm" target="UDOcon"><img src="udo_hm.gif" alt="Home" border=0 width="24" height="24"></a>
<a href="0a.htm" target="UDOcon"><img src="udo_up.gif" alt="Beschleuniger" border=0 width="24" height="24"></a>
<a href="0a02.htm" target="UDOcon"><img src="udo_lf.gif" alt="MightyMic" border=0 width="24" height="24"></a>
<a href="0a04.htm" target="UDOcon"><img src="udo_rg.gif" alt="CyReL CaTTamaran TT030 Accelerator" border=0 width="24" height="24"></a>
</td></tr></table>
</body></html>
